const express = require('express');
const router = express.Router();
const dbConfig = require('../config')
const auth = require('../services/authentication')
const axios = require('axios')
const utility = require('../utility')

// getting air quality data from openweathermap
router.get("/broadcast", auth.checkIfAuthenticated, async (req, res) => {
    const reqData = req.headers;
    const { lat, long } = reqData;
    // Make request
    axios.get(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${long}&appid=${process.env.OPEN_WEATHER_APP_ID || 'bdb34a14b4eb963b612d01b5949374cd'}`)
        .then(airRes => {
            // console.log(airRes.data);
            res.send(airRes.data)
        })
        .catch(error => {
            //    console.error('Error in saving the data', error);
            res.status(200).json({ errorCode: 500, message: error.message });
        });
});

// returns the address from coordinates
function getArcGISAddressFromLatLon(lat, lon) {
    const apiUrl = `https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/reverseGeocode?f=json&featureType=street&location=${lon},${lat}`;

    return axios.get(apiUrl)
        .then(response => {
            if (response.data && response.data.address) {
                return (response.data.address.Address + ', ' + response.data.address.City);
                // return response.data.address.LongLabel || response.data.address.ShortLabel;
            } else {
                throw new Error('Unable to fetch address');
            }
        })
        .catch(error => {
            throw error;
        });
}

// saving air quality data into firestore  
router.post("/save", auth.checkIfAuthenticated, async (req, res) => {
    try {
        data = req.body.body;
        let address;

        await getArcGISAddressFromLatLon(data.lat, data.lon)
            .then(addressValue => {
                address = addressValue;
                data.address = addressValue
                console.log("Address:", address);
            })
            .catch(error => {
                console.error("Error fetching address:", error.message);
            });


        await dbConfig.AirQualityData.doc(`/${Date.now()}/`).set({
            id: Date.now(),
            lat: data.lat,
            lon: data.lon,
            aqi: data.aqi,
            co: data.co,
            no: data.no,
            no2: data.no2,
            o3: data.o3,
            so2: data.so2,
            pm2_5: data.pm2_5,
            pm10: data.pm10,
            nh3: data.nh3,
            date: data.date,
            time: data.time,
            address: address
        });

        if (data.aqi > 3 && data.aqi < 6) {
            // Fetch user emails from Firebase Authentication and send email notifications
            const usersSnapshot = await dbConfig.admin.auth().listUsers();
            const emails = [];
            usersSnapshot.users.forEach(user => {
                emails.push(user.email);
            });

            const emailBody = `
            Hello User,

            We trust this message reaches you in good health.

            In our commitment to public health and safety, we are providing you with the most recent update on the air quality index (AQI) in your area. Being informed about air quality is a crucial step towards safeguarding your health and well-being.

            Air Quality Update:
            1. Date & Time: ${data.date}, ${data.time}
            2. Location: Latitude: ${data.lat}, Longitude: ${data.lon}
            3. Air Quality Index (AQI): ${data.aqi}

            Breakdown of Air Pollutants (in µg/m³):
            - Carbon Monoxide (CO): ${data.co}
            - Nitric Oxide (NO): ${data.no}
            - Nitrogen Dioxide (NO2): ${data.no2}
            - Ozone (O3): ${data.o3}
            - Sulfur Dioxide (SO2): ${data.so2}
            - Fine Particulate Matter (PM2.5): ${data.pm2_5}
            - Coarse Particulate Matter (PM10): ${data.pm10}
            - Ammonia (NH3): ${data.nh3}

            Precautionary Awareness:
            Given the AQI and pollutant concentrations, it's essential to take the following precautions:
            1. Stay Indoors: Limit outdoor activities, especially if you are in a sensitive group, such as children, elderly, or individuals with respiratory or heart conditions.
            2. Ventilation: Ensure your living space is well-ventilated. Use air purifiers if available.
            3. Masks: Wear masks, preferably N95 or equivalent, if you need to go outside.
            4. Eyes: Wear sunglasses or protective eyewear to prevent eye irritation.
            5. Medication: Individuals with respiratory conditions should have their medication readily accessible.
            6. Hydration: Drink plenty of water to help your body expel any toxins you might inhale.
            7. Stay Updated: Keep an eye on the AQI levels and adjust your activities accordingly.
            8. Limit Vehicle Use: Reduce vehicular use to decrease further pollution and exposure.

            Your health is paramount. Being informed and taking the necessary precautions can significantly reduce the risks associated with poor air quality.

            Stay informed, stay safe.

            Thanks & regards,
            Team IEM.
            `;

            utility.sendEmailNotification(emails, emailBody);
        }

        return res.status(200).send({
            status: "Success",
            errorCode: 200,
            message: "Data saved successfully.",
            data: data
        });
    } catch (error) {
        // console.error('Error in saving the data', error);
        res.status(200).json({ errorCode: 500, message: error.message });
    }
});

// get all air quality data auth.checkIfAuthenticated,
router.get("/allData", auth.checkIfAuthenticated, async (req, res) => {
    try {
        // Get the readingStatus from the request header
        const readingStatus = req.header("readingStatus");
        let query = dbConfig.AirQualityData;

        // Conditional filtering based on readingStatus
        if (readingStatus === "good") {
            query = query.where("aqi", "==", 1);
        } else if (readingStatus === "fair") {
            query = query.where("aqi", "==", 2);
        } else if (readingStatus === "moderate") {
            query = query.where("aqi", "==", 3);
        } else if (readingStatus === "poor") {
            query = query.where("aqi", "==", 4);
        } else if (readingStatus === "veryPoor") {
            query = query.where("aqi", "==", 5);
        }

        // Execute the query
        const querySnapshot = await query.get();

        const airQualityData = [];
        querySnapshot.forEach((doc) => {
            airQualityData.push(doc.data());
        });
        return res.status(200).send({
            status: "Success",
            errorCode: "200",
            data: airQualityData.reverse()
        });

    } catch (error) {
        // console.log(error);
        return res.status(200).send({ status: "Failed", errorCode: "500", message: error.message });
    }
});

// get the latest reading for each unique set of coordinates auth.checkIfAuthenticated,
router.get('/latestData', auth.checkIfAuthenticated, async (req, res) => {
    try {

        // Step 1: Retrieve all readings
        const querySnapshot = await dbConfig.AirQualityData.get();
        const readings = [];

        // Convert querySnapshot to an array of readings
        querySnapshot.forEach((doc) => {
            readings.push({
                id: doc.id,
                ...doc.data(),
            });
        });

        // Step 2: Group readings by coordinates
        const groupedReadings = readings.reduce((groups, reading) => {
            const key = `${reading.lat}_${reading.lon}`;
            if (!groups[key]) {
                groups[key] = [];
            }
            groups[key].push(reading);
            return groups;
        }, {});

        // Step 3: Find latest reading for each group
        const latestReadings = Object.values(groupedReadings).map((group) => {
            const latestReading = group.reduce((latest, current) => {
                const latestDateTime = new Date(`${latest.date} ${latest.time}`);
                const currentDateTime = new Date(`${current.date} ${current.time}`);
                return currentDateTime > latestDateTime ? current : latest;
            });
            return latestReading;
        });

        // Respond with the latest readings for each unique set of coordinates
        // res.setHeader('Access-Control-Allow-Origin', '*')
        // res.header("Access-Control-Allow-Origin", "*");
        // res.header("Access-Control-Allow-Methods", "GET,HEAD,OPTIONS,POST,PUT");
        // res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, x-client-key, x-client-token, x-client-secret, Authorization");

        res.status(200).send({ errorCode: "200", data: latestReadings });
    } catch (error) {
        // console.error('Error retrieving readings: ', error);
        res.status(200).json({
            errorCode: 500,
            error: error.message
        });
    }
});

// api to get user role auth.checkIfAuthenticated,

// getting data of specific lat and lon auth.checkIfAuthenticated,
router.get('/search', auth.checkIfAuthenticated, async (req, res) => {
    try {
        const lat = parseFloat(req.headers.lat);
        const lon = parseFloat(req.headers.lon);

        // Retrieve air quality data from the Firestore collection "AirQualityData" based on latitude and longitude
        const querySnapshot = await dbConfig.admin.firestore()
            .collection('AirQualityData')
            .where('lat', '==', lat)
            .where('lon', '==', lon)
            .get();

        if (querySnapshot.empty) {
            return res.status(200).json({
                message: 'Air quality data not found.',
                errorCode: 404
            });
        }

        // const airQualityData = querySnapshot.docs[0].data();
        const airQualityData = querySnapshot.docs
            .map(doc => doc.data())
            .sort((a, b) => {
                const dateTimeA = new Date(`${a.date} ${a.time}`);
                const dateTimeB = new Date(`${b.date} ${b.time}`);
                return dateTimeB - dateTimeA; // Sort in descending order (latest first)
            })[0];


        return res.status(200).json({ data: airQualityData });
    } catch (error) {
        // console.error('Error getting air quality data:', error);
        res.status(200).json({
            errroCode: 500,
            message: error.message
        });
    }
});

// get the list of objects of coordinates
router.get('/uniqueCoordinates', async (req, res) => {
    try {
        // Query Firestore collection to retrieve all documents
        const querySnapshot = await dbConfig.admin.firestore()
            .collection('AirQualityData') // Replace with your actual collection name
            .get();

        if (querySnapshot.empty) {
            return res.status(200).json({ errorCode: 404, message: 'No data found' });
        }

        const uniqueCoordinatesMap = new Map();
        querySnapshot.forEach(doc => {
            const data = doc.data();
            const coordinate = `${data.lat},${data.lon}`;
            if (!uniqueCoordinatesMap.has(coordinate)) {
                uniqueCoordinatesMap.set(coordinate, { lat: data.lat, lon: data.lon, address: data.address });
            }
        });

        const uniqueCoordinatesList = Array.from(uniqueCoordinatesMap.values());

        return res.status(200).json({ dataList: uniqueCoordinatesList });
    } catch (error) {
        // console.error('Error getting unique coordinates:', error);
        res.status(200).json({ errorCode: 500, message: error.message });
    }
});

// it get the data b/w a range of dates for specific coordinates
router.get('/chartData', async (req, res) => {
    try {
        const fromDate = req.header('fromDate');
        const toDate = req.header('toDate');
        const lat = parseFloat(req.header('lat'));
        const lon = parseFloat(req.header('lon'));

        // Query Firestore collection to retrieve data within the specified date range and coordinates
        const querySnapshot = await dbConfig.admin.firestore()
            .collection('AirQualityData') // Replace with your actual collection name
            .where('lat', '==', lat)
            .where('lon', '==', lon)
            .where('date', '>=', fromDate)
            .where('date', '<=', toDate)
            .get();

        // console.log(querySnapshot);

        const dataInRange = querySnapshot.docs.map(doc => doc.data());

        return res.status(200).json(dataInRange);
    } catch (error) {
        // console.error('Error getting data between dates and coordinates:', error);
        res.status(200).json({ errorCode: 500, message: error.message });
    }
});

module.exports = router;
